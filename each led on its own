@app.route('/test_material_led', methods=['POST'])
def test_material_led():
    try:
        data = request.json
        material = data.get('material')
        material_id = data.get('material_id', 0)
        
        if not material:
            return jsonify({'status': 'error', 'message': 'No material provided'}), 400
            
        # Create a flag file to track if button was pressed during the test
        button_pressed = [False]
        
        # Check if material exists in configuration
        if material in config.get('led_expander_address', {}):
            # Handle MCP expander LEDs
            led_addr = config['led_expander_address'][material]
            led_pin_num = config['led_pin'][material]
            button_addr = config['button_expander_address'][material]
            button_pin_num = config['button_pin'][material]
            
            led_expander = mcp_devices.get(led_addr)
            button_expander = mcp_devices.get(button_addr)
            
            if led_expander and button_expander:
                led_pin = led_expander.get_pin(led_pin_num)
                button_pin = button_expander.get_pin(button_pin_num)
                
                # Start testing thread
                test_thread = threading.Thread(
                    target=test_mcp_led_button,
                    args=(material, led_pin, button_pin, button_pressed),
                    daemon=True
                )
                test_thread.start()
                
                # Wait for button press or timeout
                test_thread.join(timeout=10)  # 10 second timeout
                
                # Check result
                if button_pressed[0]:
                    return jsonify({'status': 'success', 'message': 'Button press detected'}), 200
                else:
                    # Make sure LED is turned off if timeout occurs
                    led_pin.value = False
                    return jsonify({'status': 'timeout', 'message': 'Button press not detected'}), 200
                    
        elif material in config.get('led_pins', {}):
            # Handle native GPIO LEDs
            led_pin = config['led_pins'][material]
            button_pin = config['button_pins'][material]
            
            # Start testing thread
            test_thread = threading.Thread(
                target=test_gpio_led_button,
                args=(material, led_pin, button_pin, button_pressed),
                daemon=True
            )
            test_thread.start()
            
            # Wait for button press or timeout
            test_thread.join(timeout=10)  # 10 second timeout
            
            # Check result
            if button_pressed[0]:
                return jsonify({'status': 'success', 'message': 'Button press detected'}), 200
            else:
                # Make sure LED is turned off if timeout occurs
                GPIO.output(led_pin, GPIO.LOW)
                return jsonify({'status': 'timeout', 'message': 'Button press not detected'}), 200
        else:
            # Try to test using the material_id with a placeholder name for the test
            # This allows testing materials that haven't been saved to the database yet
            test_material = f"test_material_{material_id}"
            return jsonify({'status': 'error', 'message': f'Material "{material}" not found in configuration'}), 404
            
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)}), 500

def test_mcp_led_button(material, led_pin, button_pin, button_pressed):
    """Test an MCP expander LED and button pair."""
    print(f"Testing {material} LED and button...")
    
    # Turn on LED
    led_pin.value = True
    
    # Wait for button press with timeout
    start_time = time.time()
    while time.time() - start_time < 10:  # 10 second timeout
        if not button_pin.value:  # Button pressed (reads as low)
            button_pressed[0] = True
            time.sleep(0.5)  # Debounce
            led_pin.value = False  # Turn LED off
            print(f"Button pressed for {material}. Test successful.")
            return
        time.sleep(0.1)
    
    # Turn off LED after timeout
    led_pin.value = False
    print(f"Test timeout for {material}. No button press detected.")

def test_gpio_led_button(material, led_pin, button_pin, button_pressed):
    """Test a native GPIO LED and button pair."""
    print(f"Testing {material} LED and button...")
    
    # Turn on LED
    GPIO.output(led_pin, GPIO.HIGH)
    
    # Wait for button press with timeout
    start_time = time.time()
    while time.time() - start_time < 10:  # 10 second timeout
        if GPIO.input(button_pin) == GPIO.LOW:  # Button pressed (reads as low)
            button_pressed[0] = True
            time.sleep(0.5)  # Debounce
            GPIO.output(led_pin, GPIO.LOW)  # Turn LED off
            print(f"Button pressed for {material}. Test successful.")
            return
        time.sleep(0.1)
    
    # Turn off LED after timeout
    GPIO.output(led_pin, GPIO.LOW)
    print(f"Test timeout for {material}. No button press detected.")
