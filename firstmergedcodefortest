from flask import Flask, request, jsonify
import socket
import requests
import time
import threading
import mysql.connector
from mysql.connector import pooling
import json
import RPi.GPIO as GPIO
import board
import busio
from adafruit_mcp230xx.mcp23008 import MCP23008
from adafruit_mcp230xx.mcp23017 import MCP23017
from digitalio import Direction, Pull

app = Flask(__name__)
hostname = socket.gethostname()

# Database configuration
db_config = {
    'host': '10.110.10.204',
    'user': 'root',
    'password': 'Passw0rd123',
    'database': 'PickByLight'
}

# Set up database connection pool
mysql_pool = pooling.MySQLConnectionPool(
    pool_name="mysql_pool",
    pool_size=5,
    **db_config
)

# Hardware initialization
i2c = busio.I2C(board.SCL, board.SDA) if board.SCL and board.SDA else None
mcp_devices = {}  # Stores MCP devices
gpio_pins = {'led': {}, 'button': {}}  # Stores Raspberry Pi GPIO pins
led_status = {}  # Tracks LED status
machine_name = ""
status_led_pin = None

def get_db_connection():
    return mysql_pool.get_connection()

def get_ip_address():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
    except Exception:
        ip = "127.0.0.1"
    finally:
        s.close()
    return ip

def fetch_configuration():
    global machine_name, status_led_pin
    connection = get_db_connection()
    try:
        cursor = connection.cursor(dictionary=True)
        cursor.execute('SELECT * FROM rasp_pi_configurations3 WHERE ip_address = %s', (get_ip_address(),))
        config = cursor.fetchone()
        if config:
            # Parse JSON configuration for MCP and GPIO
            config['mcp_led_config'] = json.loads(config.get('mcp_led_config', '{}'))
            config['mcp_button_config'] = json.loads(config.get('mcp_button_config', '{}'))
            config['gpio_led_config'] = json.loads(config.get('gpio_led_config', '{}'))
            config['gpio_button_config'] = json.loads(config.get('gpio_button_config', '{}'))
            status_led_pin = config.get('status_led_pin')
            machine_name = config.get('machine_name')
            return config
        return {}
    finally:
        cursor.close()
        connection.close()

def initialize_mcp(config):
    global mcp_devices
    for material, led_addr in config['mcp_led_config'].items():
        if led_addr not in mcp_devices:
            if led_addr in ["0x20", "0x23", "0x24", "0x27"]:
                mcp_devices[led_addr] = MCP23017(i2c, address=int(led_addr, 16))
            elif led_addr in ["0x21", "0x22", "0x25", "0x26"]:
                mcp_devices[led_addr] = MCP23008(i2c, address=int(led_addr, 16))

        led_pin_num = config['mcp_led_config'][material]
        button_pin_num = config['mcp_button_config'][material]
        led_expander = mcp_devices.get(led_addr)
        button_expander = mcp_devices.get(config['mcp_button_config'].get(material))

        if led_expander and button_expander:
            led_pin = led_expander.get_pin(led_pin_num)
            led_pin.direction = Direction.OUTPUT
            led_pin.value = False  # Initialize LED off

            button_pin = button_expander.get_pin(button_pin_num)
            button_pin.direction = Direction.INPUT
            button_pin.pull = Pull.UP  # Enable internal pull-up

            led_status[material] = False  # Track LED status
        else:
            print(f"Error: Invalid MCP configuration for material {material}")

def initialize_gpio(config):
    global gpio_pins
    GPIO.setmode(GPIO.BCM)
    GPIO.setwarnings(False)

    for material, pin in config['gpio_led_config'].items():
        GPIO.setup(pin, GPIO.OUT)
        GPIO.output(pin, GPIO.LOW)
        gpio_pins['led'][material] = pin

    for material, pin in config['gpio_button_config'].items():
        GPIO.setup(pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)
        gpio_pins['button'][material] = pin

    if status_led_pin:
        GPIO.setup(status_led_pin, GPIO.OUT)
        GPIO.output(status_led_pin, GPIO.HIGH)

def verify_leds(config):
    print("Verifying LEDs...")
    # Verify MCP LEDs
    for material, led_addr in config['mcp_led_config'].items():
        led_pin_num = config['mcp_led_config'][material]
        led_expander = mcp_devices.get(led_addr)
        if led_expander:
            led_pin = led_expander.get_pin(led_pin_num)
            led_pin.value = True
            time.sleep(1)
            led_pin.value = False
            time.sleep(0.2)

    # Verify GPIO LEDs
    for material, pin in config['gpio_led_config'].items():
        GPIO.output(pin, GPIO.HIGH)
        time.sleep(1)
        GPIO.output(pin, GPIO.LOW)
        time.sleep(0.2)

def activate_led_for_material(material, machine_name):
    if material in config['mcp_led_config']:
        # Handle MCP LED
        led_addr = config['mcp_led_config'][material]
        led_pin_num = config['mcp_led_config'][material]
        button_pin_num = config['mcp_button_config'][material]
        led_expander = mcp_devices.get(led_addr)
        button_expander = mcp_devices.get(config['mcp_button_config'][material])

        if led_expander and button_expander:
            led_pin = led_expander.get_pin(led_pin_num)
            button_pin = button_expander.get_pin(button_pin_num)

            led_pin.value = True  # Turn on LED
            led_status[material] = True

            print(f"LED for {material} activated. Waiting for button press...")
            while button_pin.value:  # Wait for button press
                time.sleep(0.1)

            led_pin.value = False  # Turn off LED
            led_status[material] = False
            send_confirmation(material, machine_name)

    elif material in config['gpio_led_config']:
        # Handle GPIO LED
        led_pin = gpio_pins['led'][material]
        button_pin = gpio_pins['button'][material]

        GPIO.output(led_pin, GPIO.HIGH)  # Turn on LED
        led_status[material] = True

        print(f"LED for {material} activated. Waiting for button press...")
        while GPIO.input(button_pin) == GPIO.HIGH:  # Wait for button press
            time.sleep(0.1)

        GPIO.output(led_pin, GPIO.LOW)  # Turn off LED
        led_status[material] = False
        send_confirmation(material, machine_name)

    else:
        print(f"Error: Material {material} not found in configuration.")

def send_confirmation(material, machine_name):
    try:
        response = requests.post(
            'http://10.110.30.15:6510/confirmation_material',
            json={'material': material, 'hostname': hostname, 'machine_name': machine_name}
        )
        response.raise_for_status()
        print(f"Confirmation sent for {material}.")
    except requests.RequestException as e:
        print(f"Error sending confirmation for {material}: {e}")

@app.route('/activate_led', methods=['POST'])
def activate_led():
    data = request.json
    materials = data.get('materials', [])
    machine_name = data.get('machine_name')

    if not materials or not machine_name:
        return jsonify({'error': 'No materials or machine_name provided'}), 400

    for material in materials:
        activate_led_for_material(material, machine_name)

    return jsonify({'status': 'Materials processed successfully'}), 200

def main():
    config = fetch_configuration()
    if not config:
        print("No configuration found.")
        return

    initialize_mcp(config)
    initialize_gpio(config)
    verify_leds(config)

    try:
        app.run(host='0.0.0.0', port=5000)
    except KeyboardInterrupt:
        print("\nExiting...")
    finally:
        GPIO.cleanup()

if __name__ == '__main__':
    main()
