def monitor_connectivity():
    """
    Monitor internet connectivity and control LED animation
    When connection is lost for 1 continuous minute, run a wave animation on all LEDs
    of all detected I2C expanders to indicate connection loss
    """
    connected = True
    animation_thread = None
    stop_animation = threading.Event()
    connection_lost_time = None  # Track when connection was first lost
    
    def get_all_detected_devices_and_pins():
        """Get all detected MCP devices and their available LED pins"""
        device_pins = {}
        
        for addr, num_pairs in I2C_ADDRESS_ORDER:
            if addr in mcp_devices:
                # For 8-pair devices (MCP23017)
                if num_pairs == 8:
                    device_pins[addr] = [0, 2, 4, 6, 8, 10, 12, 14]
                # For 4-pair devices (MCP23008)
                else:
                    device_pins[addr] = [0, 2, 4, 6]
                    
        return device_pins
    
    def run_wave_animation(stop_event):
        """
        Run continuous wave animation on all detected devices until stop_event is set
        This creates a clear visual indicator of connection loss
        """
        # Get all available devices and their LED pins
        device_pins = get_all_detected_devices_and_pins()
        print(f"Starting connection loss animation on {len(device_pins)} MCP devices")
        
        # Continue animation until the stop event is set
        while not stop_event.is_set():
            # Forward wave animation across all devices
            for addr, pins in device_pins.items():
                if addr in mcp_devices:
                    device = mcp_devices[addr]
                    # Turn on each pin sequentially
                    for pin in pins:
                        if stop_event.is_set():
                            break
                        try:
                            led_pin = device.get_pin(pin)
                            led_pin.value = True
                            time.sleep(0.05)  # Short delay for animation effect
                        except Exception as e:
                            print(f"Error in wave animation (on): {addr} pin {pin}: {e}")
            
            time.sleep(0.2)  # Brief pause between forward and backward waves
            if stop_event.is_set():
                break
                
            # Backward wave animation (turn off) across all devices
            for addr, pins in device_pins.items():
                if addr in mcp_devices:
                    device = mcp_devices[addr]
                    # Turn off each pin sequentially
                    for pin in reversed(pins):
                        if stop_event.is_set():
                            break
                        try:
                            led_pin = device.get_pin(pin)
                            led_pin.value = False
                            time.sleep(0.05)  # Short delay for animation effect
                        except Exception as e:
                            print(f"Error in wave animation (off): {addr} pin {pin}: {e}")
            
            time.sleep(0.2)  # Brief pause between animation cycles
        
        # Ensure all LEDs are turned off when animation stops
        for addr, pins in device_pins.items():
            if addr in mcp_devices:
                device = mcp_devices[addr]
                for pin in pins:
                    try:
                        led_pin = device.get_pin(pin)
                        led_pin.value = False
                    except Exception as e:
                        print(f"Error turning off LED: {addr} pin {pin}: {e}")
        
        print("Connection loss animation stopped")
    
    while True:
        current_connected = ping_server()
        
        # Connection lost: start tracking time if just disconnected
        if not current_connected and connected:
            connected = False
            connection_lost_time = time.time()
            print(f"Connection lost at {time.strftime('%Y-%m-%d %H:%M:%S')} - waiting 1 minute before starting animation")
        
        # Connection still lost: check if 1 minute has passed
        elif not current_connected and not connected:
            # Only start animation if connection has been lost for 1 minute
            if connection_lost_time and (time.time() - connection_lost_time >= 60) and animation_thread is None:
                # Reset the stop event
                stop_animation.clear()
                # Start animation thread
                animation_thread = threading.Thread(
                    target=run_wave_animation, 
                    args=(stop_animation,)
                )
                animation_thread.daemon = True
                animation_thread.start()
                print(f"Connection lost for 1 minute - Wave animation started at {time.strftime('%Y-%m-%d %H:%M:%S')}")
        
        # Connection restored: stop any running animation and reset tracking
        elif current_connected and not connected:
            connected = True
            connection_lost_time = None
            
            if animation_thread is not None:
                # Signal animation to stop
                stop_animation.set()
                # Wait briefly for thread to clean up
                time.sleep(0.5)
                animation_thread = None
                print(f"Connection restored at {time.strftime('%Y-%m-%d %H:%M:%S')} - Animation stopped, normal operation resumed")
        
        # Check connection every 2 seconds
        time.sleep(2)
